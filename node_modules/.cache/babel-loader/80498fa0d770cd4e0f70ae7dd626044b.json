{"ast":null,"code":"var _jsxFileName = \"/home/klear/bootcamp/TMDB/src/context/AuthContext.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthInitialValues = {\n  email: \"\",\n  password: \"\",\n  authenticated: false,\n  toggleAuth: () => null\n};\nexport const AuthContext = /*#__PURE__*/createContext(AuthInitialValues);\n_c = AuthContext;\nexport const AuthContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isLoggedIn, setIsLoggedIn] = useState({\n    email: \"\",\n    password: \"\",\n    authenticated: false\n  });\n\n  const toggleAuth = _ref2 => {\n    let {} = _ref2;\n    return setIsLoggedIn({\n      user: user,\n      authenticated: !isLoggedIn.authenticated\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: { ...isLoggedIn,\n      toggleAuth\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 14\n  }, this);\n};\n\n_s(AuthContextProvider, \"wkBuBplt30vC39rJraFszx6NlyE=\");\n\n_c2 = AuthContextProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuthContext\");\n$RefreshReg$(_c2, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useState","AuthInitialValues","email","password","authenticated","toggleAuth","AuthContext","AuthContextProvider","children","isLoggedIn","setIsLoggedIn","user"],"sources":["/home/klear/bootcamp/TMDB/src/context/AuthContext.jsx"],"sourcesContent":["import { createContext, useState } from 'react';\n\nconst AuthInitialValues = {\n    email:\"\",\n    password:\"\", \n    authenticated: false,\n    toggleAuth: () => null\n};\n\nexport const AuthContext = createContext(AuthInitialValues);\n\nexport const AuthContextProvider = ({children}) => {\n    const [isLoggedIn, setIsLoggedIn] = useState( { \n       email:\"\", \n       password:\"\", \n       authenticated: false, \n       })\n       \n      const toggleAuth = ({}) =>\n       setIsLoggedIn({\n         user: user,\n         authenticated: !isLoggedIn.authenticated,\n       });\n     \n   \n     return  <AuthContext.Provider value={{...isLoggedIn, toggleAuth}} >{children}</AuthContext.Provider>\n   }\n   "],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;;AAEA,MAAMC,iBAAiB,GAAG;EACtBC,KAAK,EAAC,EADgB;EAEtBC,QAAQ,EAAC,EAFa;EAGtBC,aAAa,EAAE,KAHO;EAItBC,UAAU,EAAE,MAAM;AAJI,CAA1B;AAOA,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAACE,iBAAD,CAAjC;KAAMK,W;AAEb,OAAO,MAAMC,mBAAmB,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAACC;EAAD,CAAe;EAC/C,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAE;IAC3CE,KAAK,EAAC,EADqC;IAE3CC,QAAQ,EAAC,EAFkC;IAG3CC,aAAa,EAAE;EAH4B,CAAF,CAA5C;;EAME,MAAMC,UAAU,GAAG;IAAA,IAAC,EAAD;IAAA,OAClBK,aAAa,CAAC;MACZC,IAAI,EAAEA,IADM;MAEZP,aAAa,EAAE,CAACK,UAAU,CAACL;IAFf,CAAD,CADK;EAAA,CAAnB;;EAOD,oBAAQ,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE,EAAC,GAAGK,UAAJ;MAAgBJ;IAAhB,CAA7B;IAAA,UAA4DG;EAA5D;IAAA;IAAA;IAAA;EAAA,QAAR;AACD,CAfG;;GAAMD,mB;;MAAAA,mB"},"metadata":{},"sourceType":"module"}